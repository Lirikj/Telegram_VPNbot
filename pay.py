import sqlite3
from config import bot
from telebot import types, telebot 
from datetime import datetime, timedelta
from generation_key import generation_key
from telebot.types import LabeledPrice, ShippingOption
from baza import add_subscription as db_add_subscription



shipping_options = [
    ShippingOption(id='instant', title='WorldWide Teleporter').add_price(LabeledPrice('Teleporter', 50)),]
SUBSCRIPTION_OPTIONS = {
    '1 –º–µ—Å—è—Ü': 100,    
    '3 –º–µ—Å—è—Ü–∞': 300,  
    '6 –º–µ—Å—è—Ü–µ–≤': 600
}


def add_subscription(user_id, subscription_type):
    if subscription_type not in SUBSCRIPTION_OPTIONS:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")

    if subscription_type == '1 –º–µ—Å—è—Ü':
        duration_days = 30
    elif subscription_type == '3 –º–µ—Å—è—Ü–∞':
        duration_days = 90
    elif subscription_type == '6 –º–µ—Å—è—Ü–µ–≤':
        duration_days = 180
    else:
        duration_days = 30  

    start_date = datetime.now().date()
    end_date = start_date + timedelta(days=duration_days)

    try:
        with sqlite3.connect('usersVPN.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()

            if result:
                cursor.execute('''
                    UPDATE users
                    SET subscription_type = ?, subscription_start = ?, subscription_end = ?
                    WHERE user_id = ?
                ''', (subscription_type, start_date, end_date, user_id))
            else:
                cursor.execute('''
                    INSERT INTO users (
                        user_id, subscription_type, subscription_start, subscription_end, registration_date
                    ) VALUES (?, ?, ?, ?, ?)
                ''', (user_id, subscription_type, start_date, end_date, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")



def check_subscription(user_id):
    try:
        with sqlite3.connect('usersVPN.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT subscription_type, subscription_end FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()

            if result:
                subscription_type, subscription_end = result
                
                if subscription_end is None:
                    return False, None, None  

                subscription_end_date = datetime.strptime(subscription_end, '%Y-%m-%d').date()
                if subscription_end_date >= datetime.now().date():
                    return True, subscription_type, subscription_end_date
                else:
                    return False, None, None
            else:
                return False, None, None
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False, None, None


@bot.callback_query_handler(func=lambda call: call.data in SUBSCRIPTION_OPTIONS)
def callback_query(call):
    subscription_type = call.data
    user_id = call.from_user.id

    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception as e:
        pass 

    price = SUBSCRIPTION_OPTIONS[subscription_type]
    prices = [LabeledPrice(label=subscription_type, amount=price)]

    try:
        bot.send_invoice(
            chat_id=call.message.chat.id,
            title="–î–æ—Å—Ç—É–ø –∫ Vless VPN",
            description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {subscription_type}",
            invoice_payload=subscription_type,
            provider_token=None,
            currency="XTR",
            prices=prices,
            start_parameter="subscription-payment"
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á—ë—Ç–∞: {e}") 


@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query):
    print(shipping_query)
    bot.answer_shipping_query(shipping_query.id, ok=True, shipping_options=shipping_options,
                              error_message='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –Ω–∞–º –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    if payload.startswith('renewal_'):
        from renewal import handle_renewal_payment
        handle_renewal_payment(message)
        return
    
    if payload == '1 –º–µ—Å—è—Ü':
        days = 30
    elif payload == '3 –º–µ—Å—è—Ü–∞':
        days = 90
    elif payload == '6 –º–µ—Å—è—Ü–µ–≤':
        days = 180
    else:
        days = 30
    
    try:
        key = generation_key(user_id, username, days)
        
        if key:
            db_add_subscription(user_id, payload, key)  
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            getkeyvpn = types.KeyboardButton('üîë–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á')
            mysub = types.KeyboardButton('üìÉ–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞')
            extend_sub = types.KeyboardButton('üîÑ–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
            markup.add(getkeyvpn, mysub)
            markup.add(extend_sub)

            bot.send_message(message.chat.id,
                            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {payload} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                            f"üîë –í–∞—à VPN –∫–ª—é—á:\n`{key}`\n\n"
                            f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π\n"
                            f"üí∞ –°—É–º–º–∞: {message.successful_payment.total_amount} {message.successful_payment.currency}\n\n"
                            f"üìñ <a href=\"https://telegra.ph/Instrukciya-po-ustanovke-VPN-01-26\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>",
                            parse_mode='HTML',
                            reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")