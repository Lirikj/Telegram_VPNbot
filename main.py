import renewal  
from pay import SUBSCRIPTION_OPTIONS, check_subscription
from config import bot, admin
from telebot import types, telebot
from baza import users_db, save_user_data, user_exists, add_subscription, get_user_subscription
from notifications import start_notification_service, manual_check_notifications
from renewal import send_renewal_options
from admin_menu import admin_menu, admin_text_handler
from markup import menu_markup


@bot.message_handler(commands=['start', 'menu', 'st', 'mn'])
def start_message(message):
    user = message.from_user
    user_id = message.from_user.id
    save_user_data(user)

    if user_exists(user_id):
        has_sub, sub_type, sub_end = check_subscription(user_id)
        if has_sub:
            markup = menu_markup()
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {sub_type}\n–ò—Å—Ç–µ–∫–∞–µ—Ç: {sub_end}', reply_markup=markup)
        else:
            keyboard = telebot.types.InlineKeyboardMarkup()
            for option in SUBSCRIPTION_OPTIONS.keys():
                keyboard.add(telebot.types.InlineKeyboardButton(text=option, callback_data=option))
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! —ç—Ç–æ Vless VPN'
                            "\n–ß—Ç–æ–± –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)


@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.from_user.id == admin:
        admin_menu(message)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, 'VPN –±–æ—Ç \n\n'
                    'üßë‚ÄçüíªDeveloper - @JonsonP \n'
                    'ü§ñ–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ 1.0 \n'
                    '<a href="https://telegra.ph/Instrukciya-po-ustanovke-VPN-01-26">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a> \n\n'
                    '–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å ChatGPT 4.1', parse_mode='HTML')


@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    
    if admin_text_handler(message):
        return  
    
    if message.text == 'üîë–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á':
        has_sub, sub_type, sub_end = check_subscription(user_id)
        if has_sub:
            user_data = get_user_subscription(user_id)
            if user_data and user_data.get('key'):
                bot.send_message(message.chat.id, 
                                f"üîë –í–∞—à VPN –∫–ª—é—á:\n\n"
                                f"`{user_data['key']}`\n\n"
                                f"üì± –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                                parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, 
                                "‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        else:
            bot.send_message(message.chat.id, 
                            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.")
    
    elif message.text == 'üìÉ–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
        has_sub, sub_type, sub_end = check_subscription(user_id)
        if has_sub:
            user_data = get_user_subscription(user_id)
            if user_data:
                bot.send_message(message.chat.id,
                                f"üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n"
                                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']}\n"
                                f"üìã –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user_data['subscription_type']}\n"
                                f"üìÖ –ù–∞—á–∞–ª–æ: {user_data['subscription_start']}\n"
                                f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {user_data['subscription_end']}\n"
                                f"üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
            start_message(message)

    
    elif message.text == 'üîÑ–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        has_sub, sub_type, sub_end = check_subscription(user_id)
        if has_sub:
            user = message.from_user
            send_renewal_options(message.chat.id, user.first_name)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
            start_message(message)


@bot.message_handler(commands=['check_notifications'])
def check_notifications_command(message):
    manual_check_notifications()
    bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")


users_db()
start_notification_service() 
bot.polling()


