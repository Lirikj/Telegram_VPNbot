from config import bot, admin   
from telebot import types
from baza import get_subscription_statistics, get_all_active_subscriptions, get_expiring_subscriptions
from datetime import datetime
from markup import admin_markup


def is_admin(user_id):
    return user_id == admin


def admin_menu(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    markup = admin_markup()
    bot.send_message(message.chat.id, "admin menu", reply_markup=markup, parse_mode='Markdown')


def show_statistics(chat_id):
    try:
        stats = get_subscription_statistics()
        
        if stats:
            message = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VPN –±–æ—Ç–∞**\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{stats['total_users']}**\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: **{stats['active_subscriptions']}**\n"
                f"‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: **{stats['expired_subscriptions']}**\n"
                f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π: **{stats['expiring_soon']}**\n\n"
                "üìã **–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ç–∏–ø–∞–º:**\n")
            
            if stats['subscriptions_by_type']:
                for sub_type, count in stats['subscriptions_by_type'].items():
                    message += f"   ‚Ä¢ {sub_type}: **{count}** —á–µ–ª.\n"
            else:
                message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
            
            message += f"\nüìÖ –î–∞–Ω–Ω—ã–µ –Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data='admin_back')
            markup.add(back_btn)
            
            bot.send_message(chat_id, message, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def show_active_users(chat_id):
    try:
        active_subs = get_all_active_subscriptions()
        
        if not active_subs:
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data='admin_back')
            markup.add(back_btn)
            
            bot.send_message(chat_id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", reply_markup=markup)
            return
        
        page_size = 10
        total_pages = (len(active_subs) + page_size - 1) // page_size
        
        for page in range(total_pages):
            start_idx = page * page_size
            end_idx = min(start_idx + page_size, len(active_subs))
            page_users = active_subs[start_idx:end_idx]
            
            message = f"üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
            
            for i, user in enumerate(page_users, start=start_idx + 1):
                username = user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
                if username and not username.startswith('@'):
                    username = f"@{username}"
                elif not username:
                    username = "–ù–µ —É–∫–∞–∑–∞–Ω"
                
                message += (
                    f"**{i}.** ID: `{user['user_id']}`\n"
                    f"   üë§ Username: {username}\n"
                    f"   üìã –ü–æ–¥–ø–∏—Å–∫–∞: {user['subscription_type']}\n"
                    f"   ‚è∞ –î–æ: {user['subscription_end']}\n\n"
                )
            
            if page == total_pages - 1:
                markup = types.InlineKeyboardMarkup()
                back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data='admin_back')
                markup.add(back_btn)
                bot.send_message(chat_id, message, parse_mode='Markdown', reply_markup=markup)
            else:
                bot.send_message(chat_id, message, parse_mode='Markdown')
            
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def show_expiring_subscriptions(chat_id):
    try:
        expiring_subs = get_expiring_subscriptions(7)
        
        if not expiring_subs:
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data='admin_back')
            markup.add(back_btn)
            
            bot.send_message(chat_id, "‚úÖ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π", reply_markup=markup)
            return
        
        message = f"‚ö†Ô∏è **–ü–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π** ({len(expiring_subs)}):\n\n"
        
        for i, user in enumerate(expiring_subs, 1):
            username = user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
            if username and not username.startswith('@'):
                username = f"@{username}"
            elif not username:
                username = "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            end_date = datetime.strptime(user['subscription_end'], '%Y-%m-%d').date()
            today = datetime.now().date()
            days_left = (end_date - today).days
            
            if days_left == 0:
                days_text = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            elif days_left == 1:
                days_text = "üü° –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            else:
                days_text = f"üü† –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω."
            
            message += (
                f"**{i}.** ID: `{user['user_id']}`\n"
                f"   üë§ Username: {username}\n"
                f"   üìã –¢–∏–ø: {user['subscription_type']}\n"
                f"   üìÖ {days_text}\n\n"
            )
        
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data='admin_back')
        markup.add(back_btn)
        
        bot.send_message(chat_id, message, parse_mode='Markdown', reply_markup=markup)
        
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callback_handler(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    chat_id = call.message.chat.id
    data = call.data
    
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass
    
    if data == 'admin_stats':
        show_statistics(chat_id)
        bot.answer_callback_query(call.id, "ÔøΩ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
    elif data == 'admin_active_users':
        show_active_users(chat_id)
        bot.answer_callback_query(call.id, "ÔøΩ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    elif data == 'admin_expiring':
        show_expiring_subscriptions(chat_id)
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        
    elif data == 'admin_notifications':
        from notifications import manual_check_notifications
        manual_check_notifications()
        bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        bot.answer_callback_query(call.id, "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
    elif data == 'admin_back':
        markup = admin_markup()
        bot.send_message(chat_id, 'admin menu', reply_markup=markup, parse_mode='Markdown')
        bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")




